class SimulationRepository {
    private static STORAGE_KEY = "simulacoes";

    static salvarSimulacao(simulacao: Simulation): void {
        if (!this.validarSimulacao(simulacao)) {
            console.error("Erro: Parâmetros inválidos na simulação.");
            return;
        }
        
        const simulacoes = this.recuperarSimulacoes();
        const index = simulacoes.findIndex(s => s.id === simulacao.id);

        if (index !== -1) {
            simulacoes[index] = simulacao;
        } else {
            simulacoes.push(simulacao);
        }

        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(simulacoes));
    }

    static recuperarSimulacoes(): Simulation[] {
        try {
            const data = localStorage.getItem(this.STORAGE_KEY);
            return data ? JSON.parse(data) : [];
        } catch (error) {
            console.error("Erro ao recuperar simulações: ", error);
            return [];
        }
    }

    static deletarSimulacao(id: string): void {
        const simulacoes = this.recuperarSimulacoes().filter(s => s.id !== id);
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(simulacoes));
    }
    
    private static validarSimulacao(simulacao: Simulation): boolean {
        return (
            simulacao.id.trim() !== "" &&
            simulacao.nome.trim() !== "" &&
            simulacao.parametros.LFI > 0 &&
            simulacao.parametros.LM > 0 &&
            simulacao.parametros.TMDM >= 0 &&
            simulacao.parametros.TMPSC >= 0 &&
            simulacao.parametros.TMPNM >= 0 &&
            simulacao.parametros.QAL >= 0 &&
            simulacao.parametros.QACR >= 0 &&
            simulacao.parametros.IAR > 0
        );
    }
}

interface Simulation {
    id: string;
    nome: string;
    parametros: {
        LFI: number; // Limite da Fila Interna
        LM: number;  // Limite de Mesas
        TMDM: number; // Tempo Médio para Digitar Matrícula
        TMPSC: number; // Tempo Médio para Servir Comida
        TMPNM: number; // Tempo Médio de Permanência na Mesa
        QAL: number;  // Quantidade de Alunos para Liberar a Catraca
        QACR: number; // Quantidade de Alunos que Chegam ao Refeitório
        IAR: number;  // Intervalo de Atendimento do Refeitório
        distribuicao: "normal" | "exponencial" | "uniforme";
    };
    criadoEm: number; // Timestamp de criação da simulação
}


// Salvar automaticamente sempre que houver uma alteração
SimulationRepository.salvarSimulacao(novaSimulacao);

// Recuperar simulações salvas e exibir na interface
const simulacoes = SimulationRepository.recuperarSimulacoes();
exibirSimulacoesNaInterface(simulacoes);

function exibirSimulacoesNaInterface(simulacoes: Simulation[]): void {
    console.log("Simulações carregadas:", simulacoes);
    // Implementar a lógica de exibição na UI conforme necessário
}
